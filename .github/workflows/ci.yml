name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run backend unit tests
        working-directory: backend
        run: npm test

      - name: Run frontend build
        working-directory: frontend
        run: npm run build

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Start services with Docker Compose
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if backend is responding
          for i in {1..10}; do
            if curl -f http://localhost:5000/api/health >/dev/null 2>&1; then
              echo "Backend is ready!"
              break
            fi
            echo "Waiting for backend... ($i/10)"
            sleep 10
          done

      - name: Run Cucumber BDD tests
        working-directory: backend
        env:
          BASE_URL: http://localhost:5000
        run: npm run bdd

      - name: Upload logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Logs ===" > test-logs.txt
          docker compose logs --no-color >> test-logs.txt
          echo "=== Service Status ===" >> test-logs.txt
          docker compose ps >> test-logs.txt
        continue-on-error: true

      - name: Archive test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: test-logs.txt

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v || true
          docker system prune -f || true

  security-scan:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run security audit
        working-directory: backend
        run: npm audit --audit-level moderate

      - name: Run security audit (frontend)
        working-directory: frontend
        run: npm audit --audit-level moderate
